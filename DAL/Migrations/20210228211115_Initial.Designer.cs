// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ReferenceDataContext))]
    [Migration("20210228211115_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("eav")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.FilesStore.BigObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Author")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("[varbinary](max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<long?>("PreviousEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("StartDate");

                    b.ToTable("BigObject", "boo");
                });

            modelBuilder.Entity("Model.Store.AttributeName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Author")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("DataTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxSize")
                        .HasColumnType("int");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Nullable")
                        .HasColumnType("bit");

                    b.Property<long>("ObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreviousEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("StartDate");

                    b.ToTable("AttributeName", "eav");
                });

            modelBuilder.Entity("Model.Store.DataType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Kind");

                    b.HasIndex("Name");

                    b.ToTable("DataType", "eav");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Kind = 1,
                            Name = "Байт"
                        },
                        new
                        {
                            Id = 2L,
                            Kind = 2,
                            Name = "Целое без знака 16 бит"
                        },
                        new
                        {
                            Id = 3L,
                            Kind = 3,
                            Name = "Целое без знака 32 бита"
                        },
                        new
                        {
                            Id = 4L,
                            Kind = 4,
                            Name = "Целое без знака 64 бита"
                        },
                        new
                        {
                            Id = 5L,
                            Kind = 5,
                            Name = "Целое 8 бит"
                        },
                        new
                        {
                            Id = 6L,
                            Kind = 6,
                            Name = "Целое 16 бит"
                        },
                        new
                        {
                            Id = 7L,
                            Kind = 7,
                            Name = "Целое 32 бита"
                        },
                        new
                        {
                            Id = 8L,
                            Kind = 8,
                            Name = "Целое 64 бита"
                        },
                        new
                        {
                            Id = 9L,
                            Kind = 9,
                            Name = "Десятичное (финансовое)"
                        },
                        new
                        {
                            Id = 10L,
                            Kind = 10,
                            Name = "С плавающей запятой"
                        },
                        new
                        {
                            Id = 11L,
                            Kind = 11,
                            Name = "С плавающей запятой двойной точности"
                        },
                        new
                        {
                            Id = 12L,
                            Kind = 12,
                            Name = "Глобальный уникальный идентификатор (GUID)"
                        },
                        new
                        {
                            Id = 13L,
                            Kind = 13,
                            Name = "Строка"
                        },
                        new
                        {
                            Id = 14L,
                            Kind = 14,
                            Name = "Символ"
                        },
                        new
                        {
                            Id = 15L,
                            Kind = 15,
                            Name = "Дата и время"
                        },
                        new
                        {
                            Id = 16L,
                            Kind = 16,
                            Name = "Дата, время и часовой пояс"
                        });
                });

            modelBuilder.Entity("Model.Store.ObjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Author")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreviousEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("StartDate");

                    b.ToTable("ObjectEntity", "eav");
                });

            modelBuilder.Entity("Model.Store.ObjectEntityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Author")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("PreviousEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("StartDate");

                    b.ToTable("ObjectEntityType", "eav");
                });

            modelBuilder.Entity("Model.Store.ObjectValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttributeNameId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Author")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ObjectEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreviousEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeNameId");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ObjectEntityId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Value");

                    b.ToTable("ObjectValue", "eav");
                });

            modelBuilder.Entity("Model.Store.AttributeName", b =>
                {
                    b.HasOne("Model.Store.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Store.ObjectEntityType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("Model.Store.ObjectEntity", b =>
                {
                    b.HasOne("Model.Store.ObjectEntityType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("Model.Store.ObjectValue", b =>
                {
                    b.HasOne("Model.Store.AttributeName", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Store.ObjectEntity", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Object");
                });
#pragma warning restore 612, 618
        }
    }
}
